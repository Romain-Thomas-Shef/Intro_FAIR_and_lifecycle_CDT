---
title: "-Better software for Better research-<br>Introduction to the FAIR<sup>2</sup> principles for Research Software"
format:
    revealjs:
        theme: [dark, custom.scss]
        slide-number: true
        show-slide-number: speaker
author: "<br>**Romain Thomas**<br>[Head of Research Software Engineering](https://rse.shef.ac.uk/),<br> The University of Sheffield<br>[rse.shef.ac.uk](https://rse.shef.ac.uk)"
institute: "<br><strong>MADE4MADE4Manufacturing Centre for Doctoral Training, <br> Data science and RSE module </strong>, <br> October 2025"
date: ""
footer: "**Access** to the slides: [here](https://romain-thomas-shef.github.io/Intro_FAIR_and_lifecycle_CDT/#/title-slide) - **Source** [Github repository](https://github.com/Romain-Thomas-Shef/Intro_FAIR_and_lifecycle_CDT)"
from: markdown+emoji
css: style.css
---


## Useful Information:

::: {.columns}

::: {.column width="60%"}

- You can follow the slides on your own laptop :arrow_right::arrow_right:<br>

- Slides are available freely on github.

- Interrupt me whenever you want. <br>

- Every [blue]() text is a hyperlink

:::



::: {.column width="40%"}

![](assets/images/qr-code_CDT_intro.png){fig-align="center"}

:::

:::


## Who am I? {.smaller}



- Name : Romain Thomas

- Role : Head of Research Software Engineering

- Previously : Staff Astronomer and Software Project manager at the Very Large Telescope (Chile)
 
- Released/Published a few modules/software:
  - [dfitspy](https://joss.theoj.org/papers/10.21105/joss.01249)
  - [SPARTAN](https://www.sciencedirect.com/science/article/abs/pii/S2213133720300810)
  - [SCUBA](https://www.spiedigitallibrary.org/conference-proceedings-of-spie/11449/2560271/The-SCUBA-project---First-layer-of-quality-control/10.1117/12.2560271.full)
  - [STON](https://romain-thomas-shef.github.io/STON/index.html) (submitted)

![](assets/images/p3.jpg){.absolute top="350" left="300" width="800" height="250"}



## Who are we? The teams behind the programme {.smaller}
**Research Software Engineering**

::: {.columns}

::: {.column width="30%"}

![](assets/images/RSE_logo_blackborder.svg){fig-align="center"}
:::



::: {.column width="70%"}

The Research Software Engineering team is composed of 13 members and <span style="color:red">**collaborates with researchers across the University in building research software**</span>. Areas of expertise within the group include: general software development, code optimisation and performance, reproducibility, GPU computing and Deep Learning, High Performance Computing, training, etc...

:::

:::

## Who are we? The teams behind the programme {.smaller}
**Data Analytics Service**

::: {.columns}

::: {.column width="30%"}


![](assets/images/DAS_logo.png){.absolute top="300" left="10" width="300" height="90"}

:::



::: {.column width="70%"}

The Data Analytics Service (IT Services) supports research excellence at the University of Sheffield by bridging technical and analytical gaps through consultation, delivering training, and long-term collaboration with research teams. <span style="color:red">DAS supports researchers with reproducible data analysis, data visualisation, data engineering, machine learning, statistics, big data, research software, web design, and much more.</span>


:::

:::


## Who are we? The teams behind the programme {.smaller}
**Library's Scholarly Communications**

::: {.columns}

::: {.column width="30%"}

![](assets/images/Library_logo_violet_white.png){.absolute top="300" left="10" width="300" height="60"}


:::

::: {.column width="70%"}

The Library's Scholarly Communications Team provides specialist services to support researchers at the University of Sheffield. They offer guidance on making your research outputs open access, and give <span style="color:red">support on good practice in research data management, copyright and licensing as well as open research more broadly.</span>

:::

:::

# Before we start, let me ask you some questions...

##
::: incremental

- Who here has already made some code?
- If you opened that code a year from now, how easy would it be for you to run it again?
- What would someone else need in order to use it — just the files, or also data, documentation, instructions, dependencies…?
- If I wanted to find your code tomorrow, would I be able to? Where would I look?
- Would I be able to reuse it for a slightly different purpose than yours?
:::

# Why FAIR?

# Why ~~FAIR~~?

# Why OPEN?


## Research is a continuous process 

<span style="color:red">"The succession of researchers is comparable to a single person who learns indefinitely.</span><br>
<font size="4">*Pascal, Pensee, French Mathematician, Physicist, inventor, philosopher and theologian  [1623-1662]*</font>
![](assets/images/pascal.webp){.absolute top="250" left="750" width="300" height="350"}

::: incremental
-   That's very old....
-   But still very valid...
-   And becomes much more difficult with the<br>complexity of modern research
:::

## Research creates knowledge…that is passed down{.smaller}

<span style="color:red">"Knowledge is humankind's most precious treasure. Everything that we accomplished has been done due to the capacity to create a transmissible heritage, which spares each new generation the task of starting from scratch."</span> <font size="4">*B. Sirbey, le grand homme qui apprend.* </font> 
<br><br><br>

> If we are doing the research we are doing today, it is thanks to the work of previous generations that created the knowledge that we are using now.

## And that can be trusted...

::: {.columns}

::: {.column width="60%"}

::: incremental
-   Research relies on the ability to trust what has been done before. 
-   This means that a result has been tested, verified and could be <span style="color:red">reproduced</span> :arrow_right::arrow_right:
-   Tools and methods used for a particular result are known and shared…
:::

:::

::: {.column width="40%"}
<br>
![](assets/images/reproducible_turing.png)
<font size="2">[The Turing Way](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-fair.html) project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: [10.5281/zenodo.3332807](https://dx.doi.org/10.5281/zenodo.3332807)</font>
:::

:::


## What if a generation of researchers stop doing this?

::: {.columns}

::: {.column width="60%"}

::: incremental
-   Tools and methods used for a particular results are <span style="color:red">NOT</span> known and shared…
-   This means that a result can <span style="color:red">NOT</span> be tested and verified and can <span style="color:red">NOT</span> be reproduced.
-   :arrow_right: It is harder to trust research
:::

:::

::: {.column width="40%"}

![](assets/images/reproducible_turing.png)
<font size="2">[The Turing Way](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-fair.html) project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: [10.5281/zenodo.3332807](https://dx.doi.org/10.5281/zenodo.3332807)</font>

:::

:::


## Are we far from reaching this situation?
::: {.columns}

::: {.column width="40%"}

![](assets/images/NatureSurvey.png)<br>

<font size="2">[Source: Baker M., Nature, 2016](https://www.nature.com/articles/533452a)</font>

:::

::: {.column width="60%"}


::: {.r-stack}

::: incremental
-   90% said there is a crisis!
-   More than 70% of researchers have tried and failed to reproduce another scientist's experiments… 
-   <span style="color:red">And more than half have failed to reproduce their own experiments.</span>
:::

![](assets/images/Joey.png){.fragment width="600" height="300"}

:::

:::

:::


# So how do we get better?

## Let's improve!


![](assets/images/continuum.png){fig-align="center"}

<font size="2">[Source: www.aalto.fi](https://www.aalto.fi/en/open-science-and-research/getting-started-with-reproducibility-in-research)</font>


# And why not start with your software?

## Let's start by a definition: What is a software?

<br>
<br>
"Source code files, algorithms, scripts, computational workflows and executables that were created during the research process or for a research purpose."

<font size="4">[Barker et al. Scientific Data 9:622 (2022) “Introducing the FAIR Principles for research software”](https://dx.doi.org/10.1038/s41597-022-01710-x) </font>


# What is FAIR?


## The FAIR principles

::: {.columns}

::: {.column width="65%"}

![](assets/images/Fairprinciples.jpg){fig-align="center"}<br>
<font size="2">[The Turing Way](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-fair.html) project illustration by Scriberia. Used under a CC-BY 4.0 licence. DOI: [10.5281/zenodo.3332807](https://dx.doi.org/10.5281/zenodo.3332807)</font>
:::

::: {.column width="35%"}
<br><br>
A guideline for those wishing to enhance the reusability of their data holdings<br><font size="4"> [–Wilkinson et al. (2016)–](https://www.nature.com/articles/sdata201618)  </font>
:::

:::

## The FAIR principles

<br>
“Many of the FAIR Guiding Principles can be directly applied to research software by treating software and data as similar digital research objects. However, <span style="color:red">specific characteristics of software — such as its executability, composite nature, and continuous evolution and versioning</span> — make it necessary to revise and extend the principles.”

<font size="4">[Chue Hong, Neil P. et al, FAIR Principles for Research Software (FAIR4RS Principles)](https://doi.org/10.15497/RDA00068)</font>

## The FAIR principles: what do they say?

<br>

- <span style="color:red">Findable</span>: Software, and its associated metadata, is easy for both humans and machines to find

- <span style="color:red">Accessible</span>: Software, and its metadata, is retrievable via standardised protocols

<font size=4>[Barker *et al.* *Scientific Data* 9:622 (2022) "Introducing the FAIR Principles for research software" DOI: 10.1038/s41597-022-01710-x](https://dx.doi.org/10.1038/s41597-022-01710-x)</font>

::: {.notes}
FINDABLE: Research software should have a globally unique and persistent identifier (e.g., DOI or a persistent URL) so that it can be easily found and cited. Sufficient metadata should be provided to help users discover the software. This includes descriptions of the software's function, version information, authorship, and where to access it. The software and its metadata should be indexed in searchable repositories so it can be discovered via common search engines and research infrastructure platforms (e.g., Zenodo, GitHub, or institutional repositories).

ACCESSIBLE: The software should be easily retrievable using the unique identifier. Typically, this involves storing the software in a trusted repository that ensures long-term access. Clear information about the conditions under which the software can be accessed should be available, including open access options, if applicable. This ensures users understand whether they can freely use or adapt the software. 
:::

## The FAIR principles: what do they say?

<br>

- <span style="color:red">Interoperable</span>: Software interoperates with other software by exchanging data and/or metadata, and/or through interaction via application programming interfaces (APIs), described through standards.

- <span style="color:red">Reusable</span>: Software is both usable (can be executed) and reusable (can be understood, modified, built upon, or incorporated into other software)

<font size=4>[Barker *et al.* *Scientific Data* 9:622 (2022) "Introducing the FAIR Principles for research software" DOI: 10.1038/s41597-022-01710-x](https://dx.doi.org/10.1038/s41597-022-01710-x)</font>


::: {.notes}
INTEROPERABLE: The software should use standardized data formats and interfaces where possible, allowing it to work with other software, tools, or systems. Clear documentation should be provided so users know how to integrate the software with other tools or systems. Where possible, the software should implement and support established protocols, formats, and APIs that are widely adopted in the research community.

REUSABLE: The software should be well-documented, including clear instructions on how to install, run, and modify it. The metadata should describe how and where the software can be reused, including dependencies, versioning, and requirements. An appropriate open or permissive license should be provided to ensure that others can legally reuse, modify, and redistribute the software. Adhering to coding standards, including the use of tests and continuous integration (CI), enhances the reliability and reusability of the software.
:::



## University's position about FAIR {.smaller}

<br>
‘‘We aspire to open research culture that values a diverse range of contributions and adheres to the FAIR principles to enable the results of our research to be of maximum benefit to society (findable, accessible, interoperable and reusable), whilst also respecting circumstances that limit data sharing (for example, due to issues of privacy, non-consent, contractual agreements, legislation or practicality).’’  
[University of Sheffield, Statement on Open Research](https://www.sheffield.ac.uk/openresearch/university-statement-open-research)
<br><br>
‘‘All researchers, including postgraduate research students, have a personal responsibility to manage effectively the data they create….. All researchers are expected to document research data and software in line with the FAIR principles…..’’  
[University of Sheffield, Policy on good research and innovation practices](https://www.sheffield.ac.uk/media/18953/download)


## Barriers to FAIR<sup>2</sup>4RS {.smaller}

::: {.columns}

::: {.column width="50%"}

::: {.incremental}

+ fear of prejudice
    + important to create a positive culture
+ fear of 'theft'
    + licensing and citation
+ technical and time barriers
    + support is available!
    + only need to learn once
+ non-commercialisable?
    + open source and commercialisation are compatible
    + greater impact through open source

:::

:::

::: {.column width="50%"}
![](assets/images/keynote1h.JPG)
<font size=3>[Better Science through Better Data 2017) scribe images.](https://doi.org/10.6084/m9.figshare.5558653.v1)</font>

:::

:::

## Benefits of FAIR<sup>2</sup>4RS

::: {.columns}

::: {.column width="50%"}

![](assets/images/keynote1b.JPG)
<font size=3>[Better Science through Better Data 2017) scribe images.](https://doi.org/10.6084/m9.figshare.5558653.v1)</font>

:::

::: {.column width="50%"}

::: {.incremental}

+ Accelerate research
+ Increase transparency of research
+ Increase visibility, citation, reputation and impact
+ Reduce duplication of effort

:::

:::

:::

## How to be FAIR?


![](assets/images/chan_invert.png){fig-align="center" width="800" height="500"}



## FA<span style="color:red">IR</span>4RS: Think about how you are coding...

::: {.columns}

::: {.column width="50%"}


::: incremental
-  Where possible, make your code modular.
-  Comment your code to make it as clear as possible.
-  Create and provide tests that others can use.
-  Follow code standards
:::

:::

::: {.column width="50%"}

<br>

![](assets/images/C++style.png){.absolute top="100" left="550" width="500" height="350"}
![](assets/images/RStyle.png){.absolute top="330" left="510" width="400" height="150"}
![](assets/images/PEP8.png){.absolute top="430" left="650" width="400" height="150"}

:::

:::

## FA<span style="color:red">IR</span>4RS: Be open even inside the code!{.smaller}

::: {.columns}

::: {.column width="50%"}


::: incremental
-  Where possible and applicable, outputs (even between pieces of code) should use open and accessible data formats, which will help if other researchers only wish to use part of your code.
-  <span style="color:red">But do NOT reinvent the wheel!</span> In some research fields data format are standardized :arrow_right: if you want people to use your code, use [your] community standards!

:::

:::

::: {.column width="50%"}

<br>
![](assets/images/wheel.png){.absolute top="150" left="550" width="500" height="350"}
:::

:::


## <span style="color:red">FAIR</span>4RS: Version your code!{.smaller}

::: {.columns}

::: {.column width="50%"}


::: incremental
-  Using version control software platform such as Github/GitLab allows you to keep track of the changes you make to your code
-  You can release version of your software/code/scripts directly from Github. While it should not be used a long term storage place, It gives a place where your code can be downloaded and where people can contribute.

:::

:::

::: {.column width="50%"}

![](assets/images/repo.png){.absolute top="150" left="550" width="480" height="300"} <br><br><br><br><br><br><br><br><br><br>
<font size=2>[https://www.sheffield.ac.uk/library/research-data-management/repositories](https://www.sheffield.ac.uk/library/research-data-management/repositories)</font>
:::

:::




## FA<span style="color:red">IR</span>4RS: Document your code!{.smaller}

<br>

::: {.columns}

::: {.column width="50%"}

A little poem from [A beginner’s guide to writing documentation](https://www.writethedocs.org/guide/writing/beginners-guide-to-docs/]):

::: incremental
- If people don’t know why your project exists, they won’t use it.
- If people can’t figure out how to install your code, they won’t use it.
- If people can’t figure out how to use your code, they won’t use it.

:::


:::

::: {.column width="50%"}

:::

:::


## FA<span style="color:red">IR</span>4RS: Document your code!{.smaller}

<br>

::: {.columns}

::: {.column width="50%"}

A little poem from [A beginner’s guide to writing documentation](https://www.writethedocs.org/guide/writing/beginners-guide-to-docs/]):

- If people don’t know why your project exists, they won’t use it.
- If people can’t figure out how to install your code, they won’t use it.
- If people can’t figure out how to use your code, they won’t use it.

In practice, Github can host documentation as website (and it is very easy to do!) :arrow_right::arrow_right:

:::

::: {.column width="50%"}

![](assets/images/RSEwebsite.png){.absolute top="100" left="550" width="500" height="350"} 
![](assets/images/rtd.jpg){.absolute top="350" left="650" width="400" height="250"} 

:::

:::



## FA<span style="color:red">IR</span>4RS: Licence your code!{.smaller}

::: {.columns}

::: {.column width="50%"}

You need to tell people how they can re-use your code.

::: incremental
- GPLv3 [The GNU General Public License](https://www.gnu.org/licenses/gpl-3.0.en.html): a free, copyleft license for software and other kinds of works. It is intended to guarantee your freedom to share and change all versions of a software to make sure it remains free software for all its users
- [MIT licence](https://opensource.org/license/mit/):  is a permissive free software license. Without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
:::


:::

::: {.column width="50%"}

![](assets/images/licence.png){.absolute top="100" left="550" width="500" height="280"} 
<br><br><br><br><br><br><br><br><br><br>

<span style="color:red">The licence must be made clear in the code repository and in the documentation.</span>
:::

:::


## FA<span style="color:red">IR</span>4RS: Get credit for your work{.smaller}

If people are using your software you should get credit for it. 

:arrow_right: state how you want to be credited. You can add it in the documentation and/or create a [citation.cff](https://citation-file-format.github.io/) file that you can add with your code ([tools](https://citation-file-format.github.io/cff-initializer-javascript/#/). are available to generate them)

![](assets/images/citation_cff.png){.absolute top="250" left="550" width="500" height="280"} 
![](assets/images/acknow.png){.absolute top="290" left="20" width="500" height="200"} 




## FA<span style="color:red">IR</span>4RS: Share it!{.smaller}

::: {.columns}

::: {.column width="50%"}

- Create a description of your code with metadata [data about your software].
- Codemeta is a set of keywords used to describe code and how to structure them in a machine readable way<br>

Examples:

::: incremental
- The citation.cff file contains metadata
- Description keywords
- Url to repository, to documentation
- List of contributors and affiliations
- etc…
:::


:::

::: {.column width="50%"}

![](assets/images/metadata.png){.absolute top="150" left="650" width="400" height="300"}
:::

:::

## FA<span style="color:red">IR</span>4RS: Share it!{.smaller}

::: {.columns}

::: {.column width="50%"}

<br>
In order to ensure that others can access and download your code, and that this access remains permanent over time, you should deposit your code in a repository. Two types:

- General purpose
- Domain Specific

 <span style="color:red"> Choose what makes more sense for you project! </span>

:::

::: {.column width="50%"}

![](assets/images/zenodo.png){.absolute top="200" left="550" width="500" height="300"}

:::

:::


## FA<span style="color:red">IR</span>4RS: Share it!{.smaller}

::: {.columns}

::: {.column width="50%"}

<br>
In order to ensure that others can access and download your code, and that this access remains permanent over time, you should deposit your code in a repository. Two types:

- General purpose
- Domain Specific

 <span style="color:red">Choose what makes more sense for you project!</span>

:::

::: {.column width="50%"}

![](assets/images/re3.png){.absolute top="80" left="600" width="400" height="200"}<br><br><br><br><br><br>

 <span style="color:red">Numerous repositories give your content a DOI [Digital Object Identifier]</span>
It means it can be cited in publication and other communications in order to open up your research to others and invite collaboration, as well as ensuring a constant link to your code. 
:::

:::

## <span style="color:red">FA</span>IR4RS: Publish it!{.smaller}
 
<br>

::: {.columns}

::: {.column width="50%"}

- Generalist software journals
  - [JOSS](https://joss.theoj.org/): Journal of Open Source Software:
<font size=3>Academic journal with a formal peer review process that is designed to improve the quality of the software submitted. </font>
  - [JORS](https://openresearchsoftware.metajnl.com/): Journal of Open Research Software:
<font size=3> Features peer reviewed Software Metapapers describing research software with high reuse potential. </font>
  - [Software Impacts](https://www.sciencedirect.com/journal/software-impacts):
<font size=3>multidisciplinary, open access, peer-reviewed journal which publishes short, articles that describe software which addresses a research challenge. </font>

:::

::: {.column width="50%"}

- Some are domain specific:
  - Astronomy and computing
  - Journal of Artificial Societies and Social Simulation
  - Journal of Statistical Software
  - Science of Computer Programming
  - Computer Methods and Programs in Biomedicine

:::

:::


You can find a list of potential journals [here](https://www.software.ac.uk/top-tip/which-journals-should-i-publish-my-software)



# The RSE module: what will you learn this year?


## Lack of skills for developing software

::: {.columns}

::: {.column width="50%"}

<br><br>
Do you feel that you have received sufficient training to develop reliable software?


<font size=3>Bob Turner & Paul Richmond, UoS, RSE team, [github.com/RSE-Sheffield/sssurvey](rse.shef.ac.uk/sssurvey). </font>
:::

::: {.column width="50%"}

![](assets/images/Survey.png){.absolute top="200" left="550" width="500" height="200"}


:::

:::


## The FAIR<sup>2</sup>4RS Programme: Overview

![](assets/images/Programme.png){fig-align="center"}


## Software Lifecycle Planning

::: {.columns}

::: {.column width="50%"}

<br>
<span style="color:red">Who</span>: 
[R Thomas](mailto:romain.thomas@sheffield.ac.uk) 

<span style="color:red">When/Length</span>: After this talk today!

:::

::: {.column width="50%"}

<font size=5>

<ins>Abstract:</ins>  
When you start writing software it is often very useful to think about the development process and how you will make your software sustainable in the long term. In this module we will introduce important aspects of software development in research: <span style="color:red">*software management plan, licences and dissemination*</span>. This module should allow you to ask yourself the right questions when starting a research software project.

</font>

:::

:::

## Version control: Git, GitHub and GitKraken - From Zero to Hero 

::: {.columns}

::: {.column width="50%"}


<br>

<span style="color:red">Who</span>:  [Neil Shephard](mailto:neil.shephard@sheffield.ac.uk)

<span style="color:red">When/Length</span>: 27/10 & 03/11. 


:::

::: {.column width="50%"}

<font size=5>


<ins>Abstract:</ins> 
If you’ve never heard of or used version control and Git before this is the course for you. We start by introducing version control and exploring how it can be beneficial to researchers, then we introduce some useful tools and get started with some basic workflow using these tools. We build on those foundations with collaborative exercises that introduce key concepts such as forks, pull requests and branches and give you the chance to <span style="color:red">*get some hands-on experience with using version control in a research setting*</span>. 


</font>



:::

:::


## Design your code (and write less of it)

::: {.columns}

::: {.column width="50%"}


<br><br>
<span style="color:red">Who</span>: [Martin Dyer](mailto:martin.dyer@sheffield.ac.uk), Neil Shephard

<span style="color:red">When/Length</span>: 24/11 & 01/12

:::

::: {.column width="50%"}

<font size=5>

<ins>Abstract:</ins>  

The way you write your code will have a massive impact on how easy it is to maintain in the long run. <span style="color:red">*This course on Code Design introduces essential principles and best practices for writing clean and maintainable code*</span>. We will learn how we can write clean code, adhering to naming conventions, commenting, and following PEP 8 guidelines. We will then explore some fundamental principles such as DRY, KISS or YAGNI that are important to keep in mind when writing new code and see how we can spend less time touching the code by introducing configuration files and command line interface.   

</font>

:::

:::

## Documentation

::: {.columns}

::: {.column width="50%"}


<br><br>
<span style="color:red">Who</span>: [Joe Heffer](mailto:joe.heffer@sheffield.ac.uk) 

<span style="color:red">When/Length</span>: 19/2

:::

::: {.column width="50%"}

<font size=5>

<br>
<ins>Abstract:</ins>  

Well-documented software promotes reproducibility, maintainability, and increased research impact through wider adoption and citation. <span style="color:red">*This course teaches researchers how to document their software effectively, making it accessible and understandable to others.*</span> It covers topics such as writing readable code and usage instructions.

</font>

:::

:::

## Code Testing

::: {.columns}

::: {.column width="50%"}


<br><br>
<span style="color:red">Who</span>: [Sylvia Whittle](mailto:sylvia.whittle@sheffield.ac.uk), Michael Foster 

<span style="color:red">When/Length</span>: January (half day)

<span style="color:red">Format</span>: In person


:::

::: {.column width="50%"}

<font size=5>


<ins>Abstract:</ins>  

Does your code work? Are you sure? How do you ensure that it keeps working when you change it? Manually verifying is slow and tedious. Why not automate it? Software testing checks that your code works for you, and when it breaks, it can show you exactly where it broke, without you having to trawl through hundreds of lines of code manually.<span style="color:red">*This course aims to provide you with the tools you need to start automatically ensuring the reliability of your code.*</span>


</font>



:::

:::


## Reproducible Environments

::: {.columns}

::: {.column width="50%"}

<br><br>
<span style="color:red">Who</span>: [Dan Brady](mailto:dan.brady@sheffield.ac.uk) 

<span style="color:red">When/Length</span>: 30/4

:::

::: {.column width="50%"}

<font size=5>

<br>
<ins>Abstract:</ins>  

Ensuring that others are able to take your code, run it, and are able to produce the same (or equivalent) results is one of the key tenets of FAIR and reproducible research software. <span style="color:red">*This course will provide you with an overview of different ways to make your code reproducible*</span> and then focus on virtual environments as a specific tool for computational reproducibility.

</font>

:::

:::





## RSE website 

![](assets/images/Screenshot_website.png){fig-align="center"}

<font size=5>
**Contacts:**

- Tamora James -RSE and FAIR<sup>2</sup>4RS Programme Manager -[(t.d.james@sheffield.ac.uk)](mailto:t.d.james@sheffield.ac.uk)
- Romain Thomas -Head of RSE-[(romain.thomas@sheffield.ac.uk)](mailto:romain.thomas@sheffield.ac.uk)

</font>


## Acknowledgements & References {.smaller}

* Thank you to Tamora James for leading the development of this training programme
* Thank you to Christopher Wild, Ric Campbell, Farhad Allian, Daniel Brady, Kate O’neill, Joe Heffer, Jenni Adams, Neil Shephard, Sylvia Wittle and Arfon Smith for dedicating time to prepare all the material!

**References**<br>
* D. Wilby [Lunchbyte talk on the FAIR principles](https://www.davidwilby.dev/opensourcefair4rs/#/title-slide)<br>
* T. James, FAIR for research software, Talk OpenFest 2024<br>
* [The Turing Way](https://book.the-turing-way.org/index.html)<br>
* B. Sirvey [Le grand homme qui apprend](https://medium.com/@borissirbey/le-grand-homme-qui-apprend-0bc4f4330d2d)<br>
* Chue Hong, Neil P. et al, [FAIR principles for Research Software](https://doi.org/10.15497/RDA00068)<br>
